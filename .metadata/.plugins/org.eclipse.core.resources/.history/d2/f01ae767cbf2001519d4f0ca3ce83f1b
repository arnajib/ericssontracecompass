/*******************************************************************************
 * Copyright (c) 2012, 2015 Ericsson, École Polytechnique de Montréal and others.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Patrick Tasse - Initial API and implementation
 *   Geneviève Bastien - Move code to provide base classes for time graph view
 *   Christian Mansky - Add check active / uncheck inactive buttons
 *   Mahdi Zolnouri & Samuel Gagnon - Add flat / hierarchical button
 *
 *******************************************************************************/

package org.eclipse.tracecompass.analysis.os.linux.ui.views.controlflow;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.events.MenuDetectEvent;
import org.eclipse.swt.events.MenuDetectListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.tracecompass.analysis.os.linux.core.kernel.Attributes;
import org.eclipse.tracecompass.analysis.os.linux.core.kernel.KernelAnalysisModule;
import org.eclipse.tracecompass.analysis.os.linux.core.kernel.KernelThreadInformationProvider;
import org.eclipse.tracecompass.internal.analysis.os.linux.ui.Activator;
import org.eclipse.tracecompass.internal.analysis.os.linux.ui.IControlflowImageConstants;
import org.eclipse.tracecompass.internal.analysis.os.linux.ui.Messages;
import org.eclipse.tracecompass.internal.analysis.os.linux.ui.actions.FollowThreadAction;
import org.eclipse.tracecompass.internal.analysis.os.linux.ui.views.controlflow.ControlFlowColumnComparators;
import org.eclipse.tracecompass.statesystem.core.ITmfStateSystem;
import org.eclipse.tracecompass.statesystem.core.exceptions.AttributeNotFoundException;
import org.eclipse.tracecompass.statesystem.core.exceptions.StateSystemDisposedException;
import org.eclipse.tracecompass.statesystem.core.exceptions.StateValueTypeException;
import org.eclipse.tracecompass.statesystem.core.exceptions.TimeRangeException;
import org.eclipse.tracecompass.statesystem.core.interval.ITmfStateInterval;
import org.eclipse.tracecompass.statesystem.core.statevalue.ITmfStateValue;
import org.eclipse.tracecompass.tmf.core.statesystem.TmfStateSystemAnalysisModule;
import org.eclipse.tracecompass.tmf.core.trace.ITmfTrace;
import org.eclipse.tracecompass.tmf.core.trace.TmfTraceManager;
import org.eclipse.tracecompass.tmf.core.trace.TmfTraceUtils;
import org.eclipse.tracecompass.tmf.core.util.Pair;
import org.eclipse.tracecompass.tmf.ui.views.timegraph.AbstractStateSystemTimeGraphView;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.TimeGraphCombo;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.ILinkEvent;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.ITimeEvent;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.ITimeGraphEntry;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.NullTimeEvent;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.TimeEvent;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.TimeGraphEntry;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.model.TimeLinkEvent;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.widgets.Utils;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.widgets.Utils.Resolution;
import org.eclipse.tracecompass.tmf.ui.widgets.timegraph.widgets.Utils.TimeFormat;

import com.google.common.collect.ImmutableList;

/**
 * The Control Flow view main object
 *
 */
public class ControlFlowView extends AbstractStateSystemTimeGraphView {

    // ------------------------------------------------------------------------
    // Constants
    // ------------------------------------------------------------------------
    /**
     * View ID.
     */
    public static final String ID = "org.eclipse.tracecompass.analysis.os.linux.views.controlflow"; //$NON-NLS-1$

    private static final String PROCESS_COLUMN = Messages.ControlFlowView_processColumn;
    private static final String TID_COLUMN = Messages.ControlFlowView_tidColumn;
    private static final String PTID_COLUMN = Messages.ControlFlowView_ptidColumn;
    private static final String BIRTH_TIME_COLUMN = Messages.ControlFlowView_birthTimeColumn;
    private static final String TRACE_COLUMN = Messages.ControlFlowView_traceColumn;
    private static final String INVISIBLE_COLUMN = Messages.ControlFlowView_invisibleColumn;
    private Action fOptimizationAction;

    // Those two fields are constructed in buildEventList and they are
    // used to swap between flat view and hierarchical view
    private List<TimeGraphEntry> fFlatList;
    private List<TimeGraphEntry> fHierarchicalList;
    MenuManager fItem;

    private boolean fIsFlatViewClicked = false;

    private static final String[] COLUMN_NAMES = new String[] {
            PROCESS_COLUMN,
            TID_COLUMN,
            PTID_COLUMN,
            BIRTH_TIME_COLUMN,
            TRACE_COLUMN
    };

    private static final String[] FILTER_COLUMN_NAMES = new String[] {
            PROCESS_COLUMN,
            TID_COLUMN
    };

    // Timeout between updates in the build thread in ms
    private static final long BUILD_UPDATE_TIMEOUT = 500;

    private static final Comparator<ITimeGraphEntry>[] COLUMN_COMPARATORS;

    private static final int INITIAL_SORT_COLUMN_INDEX = 3;

    static {
        ImmutableList.Builder<Comparator<ITimeGraphEntry>> builder = ImmutableList.builder();
        builder.add(ControlFlowColumnComparators.PROCESS_NAME_COLUMN_COMPARATOR).add(ControlFlowColumnComparators.TID_COLUMN_COMPARATOR).add(ControlFlowColumnComparators.PTID_COLUMN_COMPARATOR).add(
                ControlFlowColumnComparators.BIRTH_TIME_COLUMN_COMPARATOR).add(ControlFlowColumnComparators.TRACE_COLUMN_COMPARATOR);
        List<Comparator<ITimeGraphEntry>> l = builder.build();
        COLUMN_COMPARATORS = l.toArray(new Comparator[l.size()]);
    }

    private MenuManager fMenuMgr;

    // ------------------------------------------------------------------------
    // Constructors
    // ------------------------------------------------------------------------

    /**
     * Constructor
     */
    public ControlFlowView() {
        super(ID, new ControlFlowPresentationProvider());
        setTreeColumns(COLUMN_NAMES, COLUMN_COMPARATORS, INITIAL_SORT_COLUMN_INDEX);
        setTreeLabelProvider(new ControlFlowTreeLabelProvider());
        setFilterColumns(FILTER_COLUMN_NAMES);
        setFilterLabelProvider(new ControlFlowFilterLabelProvider());
        setEntryComparator(ControlFlowColumnComparators.BIRTH_TIME_COLUMN_COMPARATOR);
    }

    @Override
    public void createPartControl(Composite parent) {
        super.createPartControl(parent);
        // add "Check active" Button to TimeGraphFilterDialog
        super.getTimeGraphCombo().addTimeGraphFilterCheckActiveButton(
                new ControlFlowCheckActiveProvider(Messages.ControlFlowView_checkActiveLabel, Messages.ControlFlowView_checkActiveToolTip));
        // add "Uncheck inactive" Button to TimeGraphFilterDialog
        super.getTimeGraphCombo().addTimeGraphFilterUncheckInactiveButton(
                new ControlFlowCheckActiveProvider(Messages.ControlFlowView_uncheckInactiveLabel, Messages.ControlFlowView_uncheckInactiveToolTip));
        createContextMenu();
    }

    private void createContextMenu() {
        fMenuMgr = new MenuManager();
        final TimeGraphCombo timeGraphCombo = getTimeGraphCombo();
        TreeViewer treeViewer = timeGraphCombo.getTreeViewer();
        Control control = treeViewer.getControl();
        Menu menu = fMenuMgr.createContextMenu(control);
        control.setMenu(menu);
        control.addMenuDetectListener(new MenuDetectListener() {
            @Override
            public void menuDetected(MenuDetectEvent event) {
                fMenuMgr.removeAll();
                Point point = control.toControl(event.x, event.y);
                // this is super important, it makes zoom still work. Do not try
                // to extend to the time graph area.
                TreeItem item = treeViewer.getTree().getItem(point);

                if (item.getData() instanceof ControlFlowEntry) {
                    ControlFlowEntry entry = (ControlFlowEntry) item.getData();
                    fMenuMgr.add(new FollowThreadAction(ControlFlowView.this, entry.getName(), entry.getThreadId(), entry.getTrace()));
                }
            }
        });

    }

    @Override
    protected void fillLocalToolBar(IToolBarManager manager) {
        // add "Optimization" Button to local tool bar of Controlflow
        IAction optimizationAction = getOptimizationAction();
        manager.add(optimizationAction);

        // add a seperator to local tool bar
        manager.add(new Separator());

        super.fillLocalToolBar(manager);
        IDialogSettings settings = Activator.getDefault().getDialogSettings();
        IDialogSettings section = settings.getSection(getClass().getName());
        if (section == null) {
            section = settings.addNewSection(getClass().getName());
        }

        IAction hideArrowsAction = getTimeGraphCombo().getTimeGraphViewer().getHideArrowsAction(section);
        manager.add(hideArrowsAction);

        IAction followArrowBwdAction = getTimeGraphCombo().getTimeGraphViewer().getFollowArrowBwdAction();
        followArrowBwdAction.setText(Messages.ControlFlowView_followCPUBwdText);
        followArrowBwdAction.setToolTipText(Messages.ControlFlowView_followCPUBwdText);
        manager.add(followArrowBwdAction);

        IAction followArrowFwdAction = getTimeGraphCombo().getTimeGraphViewer().getFollowArrowFwdAction();
        followArrowFwdAction.setText(Messages.ControlFlowView_followCPUFwdText);
        followArrowFwdAction.setToolTipText(Messages.ControlFlowView_followCPUFwdText);
        manager.add(followArrowFwdAction);
    }

    private IAction getOptimizationAction() {
        if (fOptimizationAction == null) {
            fOptimizationAction = new Action() {

                @Override
                public void runWithEvent(Event event) {
                    // Representation for the transition graph between tids
                    class AdjacencyLists {
                        // Map of every thread to its position its the adjacency
                        // list
                        Map<Integer, Integer> tidToPos;
                        Set<Integer> tids;
                        List<Integer>[] adj;

                        public AdjacencyLists(List<Pair<Integer, Integer>> edges) {
                            // We begin by constructing tidToPos. We will need
                            // it for constructing adj.
                            // We also construct tids. We will need it for the
                            // grouping algorithm
                            tidToPos = new HashMap<>();
                            tids = new TreeSet<>();
                            int pos = 0;
                            for (Pair<Integer, Integer> edge : edges) {
                                int fromTid = edge.getFirst();
                                int toTid = edge.getSecond();
                                tids.add(fromTid);
                                tids.add(toTid);
                                if (!tidToPos.containsKey(fromTid)) {
                                    tidToPos.put(fromTid, pos);
                                    pos++;
                                }
                                if (!tidToPos.containsKey(toTid)) {
                                    tidToPos.put(toTid, pos);
                                    pos++;
                                }
                            }

                            // We now insert every edge in the adjacency list
                            int nVertices = tidToPos.size();
                            adj = new List[nVertices];
                            for (int i = 0; i < nVertices; i++) {
                                adj[i] = new ArrayList<>();
                            }
                            for (Pair<Integer, Integer> edge : edges) {
                                int fromTid = edge.getFirst();
                                int toTid = edge.getSecond();
                                int fromTidPos = tidToPos.getOrDefault(fromTid, -1);
                                int toTidPos = tidToPos.getOrDefault(toTid, -1);
                                assert (fromTidPos != -1 && toTidPos != -1);

                                assert (!adj[fromTidPos].contains(toTid)); // CHECKUP
                                                                           // TEMPORAIRE
                                adj[fromTidPos].add(toTid);
                                assert (!adj[toTidPos].contains(fromTid)); // CHECKUP
                                                                           // TEMPORAIRE
                                adj[toTidPos].add(fromTid);
                            }
                        }

                        public List<List<Integer>> getGroupedTids() {
                            TreeSet<Integer> remainingTids = new TreeSet<>(tids);
                            LinkedList<List<Integer>> groupedTids = new LinkedList<>();

                            // Each time we exit DFS, it means we completly
                            // visited a subgraph.
                            // If remainingTids is not empty, there are subgraph
                            // left to visit
                            while (!remainingTids.isEmpty()) {
                                // tid to initialize the DFS
                                Integer tid = remainingTids.first();
                                remainingTids.remove(tid);

                                // We create a new group and we begin the DFS
                                groupedTids.add(new LinkedList<>());
                                DFS(tid, groupedTids, remainingTids);
                            }

                            return groupedTids;
                        }

                        // Depth first search
                        private void DFS(Integer tid, LinkedList<List<Integer>> groupedTids, Set<Integer> remainingTids) {
                            Integer tidPos = tidToPos.getOrDefault(tid, -1);
                            assert (tidPos != -1);

                            // We visit each tid we have not see yet
                            for (Integer adjTid : adj[tidPos]) {
                                if (remainingTids.contains(adjTid)) {
                                    remainingTids.remove(adjTid);
                                    DFS(adjTid, groupedTids, remainingTids);
                                }
                            }

                            // We compute the current node
                            groupedTids.getLast().add(tid);
                        }
                    }

                    // "edges" contains the count of every arrows between two
                    // tids (Pair<Integer, Integer>). For
                    // constructing the Pair, we always put the smallest tid
                    // first
                    Map<Pair<Integer, Integer>, Integer> edges = new HashMap<>();
                    // This method only returns the arrows in the current time
                    // interval [a,b] of ControlFlowView. Thus,
                    // we only optimize for that time interval
                    List<ILinkEvent> arrows = getTimeGraphViewer().getTimeGraphControl().getArrows();
                    KernelAnalysisModule module = TmfTraceUtils.getAnalysisModuleOfClass(getTrace(), KernelAnalysisModule.class, KernelAnalysisModule.ID);
                    // We iterate in arrows to count the number of transitions
                    // between every tids
                    for (ILinkEvent arrow : arrows) {
                        ControlFlowEntry from = (ControlFlowEntry) arrow.getEntry();
                        ControlFlowEntry to = (ControlFlowEntry) arrow.getDestinationEntry();

                        int fromTid = from.getThreadId();
                        int toTid = to.getThreadId();

                        if (fromTid != toTid) {
                            //////////////////////////////////////
                            Boolean trouvefrom = false;
                            Boolean trouveto = false;
                            Set<Integer> threadsss = new HashSet();
                            for (long cpn = 0L; cpn < 4; cpn++) {
                                Integer fromCpu = KernelThreadInformationProvider.getThreadOnCpu(module, cpn, arrow.getTime());
                                Integer toCpu = KernelThreadInformationProvider.getThreadOnCpu(module, cpn, arrow.getTime() + arrow.getDuration());

                                if (fromCpu != null && fromCpu == fromTid) {
                                    trouvefrom = true;
                                    threadsss.add(fromCpu);
                                }
                                if (toCpu != null && toCpu == toTid) {
                                    // System.out.println(fromCpu);
                                    // System.out.println(toCpu);
                                    threadsss.add(toCpu);
                                    trouveto = true;
                                }
                            }

                            if (trouvefrom) {
                                // System.out.println("On a trouve from!!!!!");
                            } else {
                                // System.out.println("On a pas trouve
                                // from......");
                            }
                            if (trouveto) {
                                // System.out.println("On a trouve to!!!!!");
                            } else {
                                // System.out.println("On a pas trouve
                                // to......");
                            }
                            for (Integer item : threadsss) {
                                System.out.println( threadsss.contains(item) );

                            }
                            ////////////////////////////////////
                            Pair<Integer, Integer> key = new Pair<>(Math.min(fromTid, toTid), Math.max(fromTid, toTid));
                            Integer count = edges.getOrDefault(key, 0);
                            edges.put(key, count + 1);
                        }
                    }

                    // We sort the edges on the transition count (in decreasing
                    // order) for the greedy algorithm
                    List<Pair<Integer, Integer>> sortedEdges = edges.entrySet().stream().sorted(Map.Entry.<Pair<Integer, Integer>, Integer> comparingByValue().reversed()).map(Map.Entry::getKey).collect(Collectors.toList());

                    AdjacencyLists adjacency = new AdjacencyLists(sortedEdges);
                    List<List<Integer>> groupedTids = adjacency.getGroupedTids();

                    // We assign the starting position of each group
                    int numberOfGroups = groupedTids.size();
                    Integer startingPosOfGroup[] = new Integer[numberOfGroups];
                    int pos = 0;
                    for (int i = 0; i < numberOfGroups; i++) {
                        startingPosOfGroup[i] = pos;
                        pos += groupedTids.get(i).size();
                    }

                    // We map each thread to its group
                    Map<Integer, Integer> tidToGroup = new HashMap<>();
                    int g = 0;
                    for (List<Integer> group : groupedTids) {
                        for (Integer tid : group) {
                            tidToGroup.put(tid, g);
                        }
                        g++;
                    }

                    List<Integer> outList[] = new ArrayList[numberOfGroups];
                    for (int i = 0; i < numberOfGroups; i++) {
                        outList[i] = new ArrayList<>();
                    }
                    for (Pair<Integer, Integer> edge : sortedEdges) {
                        int fromTid = edge.getFirst();
                        int toTid = edge.getSecond();
                        int group = tidToGroup.getOrDefault(fromTid, -1);
                        assert (group != -1);
                        if (!outList[group].contains(fromTid)) {
                            outList[group].add(fromTid);
                        }

                        if (!outList[group].contains(toTid)) {
                            outList[group].add(toTid);
                        }
                    }

                    final ITmfStateSystem ss = TmfStateSystemAnalysisModule.getStateSystem(getTrace(), KernelAnalysisModule.ID);

                    List<TimeGraphEntry> currentList = getEntryList(ss);
                    for (TimeGraphEntry entry : currentList) {
                        ControlFlowEntry cEntry = (ControlFlowEntry) entry;
                        int tid = cEntry.getThreadId();
                        int group = tidToGroup.getOrDefault(tid, -1);
                        if (group != -1) {
                            int startingPos = startingPosOfGroup[group];
                            cEntry.setSchedulingPosition(outList[group].indexOf(tid) + startingPos);
                        } else {
                            cEntry.setSchedulingPosition(Long.MAX_VALUE);
                        }
                    }

                    setEntryComparator(ControlFlowColumnComparators.SCHEDULING_COLUMN_COMPARATOR);
                    createFlatList();
                    refresh();

                }
            };

            fOptimizationAction.setText(Messages.ControlFlowView_optimizeLabel);
            fOptimizationAction.setToolTipText(Messages.ControlFlowView_optimizeToolTip);
            fOptimizationAction.setImageDescriptor(Activator.getDefault().getImageDescripterFromPath(IControlflowImageConstants.IMG_UI_OPTIMIZE));
        }
        return fOptimizationAction;
    }

    @Override
    protected void fillLocalMenu(IMenuManager manager) {
        super.fillLocalMenu(manager);
        fItem = new MenuManager(Messages.ControlFlowView_threadPresentation);
        IAction flatAction = createFlatAction();
        fItem.add(flatAction);

        fItem.add(createHierarchicalAction());
        manager.add(fItem);

    }

    private IAction createHierarchicalAction() {
        IAction action = new Action(Messages.ControlFlowView_hierarchicalViewLabel, IAction.AS_RADIO_BUTTON) {
            @Override
            public void run() {
                if (fIsFlatViewClicked) {
                    setTraceEntryChildren(fHierarchicalList);
                    fIsFlatViewClicked = false;
                }
            }
        };
        action.setChecked(true);
        action.setToolTipText(Messages.ControlFlowView_hierarchicalViewToolTip);
        action.setImageDescriptor(Activator.getDefault().getImageDescripterFromPath(IControlflowImageConstants.IMG_UI_HIERARCHICAL_VIEW));
        return action;
    }

    private IAction createFlatAction() {
        IAction action = new Action(Messages.ControlFlowView_flatViewLabel, IAction.AS_RADIO_BUTTON) {
            @Override
            public void run() {
                createFlatList();
            }
        };
        action.setToolTipText(Messages.ControlFlowView_flatViewToolTip);
        action.setImageDescriptor(Activator.getDefault().getImageDescripterFromPath(IControlflowImageConstants.IMG_UI_FLAT_VIEW));
        return action;
    }

    private void createFlatList() {
        if (!fIsFlatViewClicked) {
            setTraceEntryChildren(fFlatList);
            fIsFlatViewClicked = true;
        }
    }

    @Override
    protected String getNextText() {
        return Messages.ControlFlowView_nextProcessActionNameText;
    }

    @Override
    protected String getNextTooltip() {
        return Messages.ControlFlowView_nextProcessActionToolTipText;
    }

    @Override
    protected String getPrevText() {
        return Messages.ControlFlowView_previousProcessActionNameText;
    }

    @Override
    protected String getPrevTooltip() {
        return Messages.ControlFlowView_previousProcessActionToolTipText;
    }

    /**
     * @author gbastien
     *
     */
    protected static class ControlFlowTreeLabelProvider extends TreeLabelProvider {

        @Override
        public String getColumnText(Object element, int columnIndex) {
            ControlFlowEntry entry = (ControlFlowEntry) element;

            if (COLUMN_NAMES[columnIndex].equals(Messages.ControlFlowView_processColumn)) {
                return entry.getName();
            } else if (COLUMN_NAMES[columnIndex].equals(Messages.ControlFlowView_tidColumn)) {
                return Integer.toString(entry.getThreadId());
            } else if (COLUMN_NAMES[columnIndex].equals(Messages.ControlFlowView_ptidColumn)) {
                if (entry.getParentThreadId() > 0) {
                    return Integer.toString(entry.getParentThreadId());
                }
            } else if (COLUMN_NAMES[columnIndex].equals(Messages.ControlFlowView_birthTimeColumn)) {
                return Utils.formatTime(entry.getStartTime(), TimeFormat.CALENDAR, Resolution.NANOSEC);
            } else if (COLUMN_NAMES[columnIndex].equals(Messages.ControlFlowView_traceColumn)) {
                return entry.getTrace().getName();
            } else if (COLUMN_NAMES[columnIndex].equals(INVISIBLE_COLUMN)) {
                return Long.toString(entry.getSchedulingPosition());
            }
            return ""; //$NON-NLS-1$
        }

    }

    private static class ControlFlowFilterLabelProvider extends TreeLabelProvider {

        @Override
        public String getColumnText(Object element, int columnIndex) {
            ControlFlowEntry entry = (ControlFlowEntry) element;

            if (columnIndex == 0) {
                return entry.getName();
            } else if (columnIndex == 1) {
                return Integer.toString(entry.getThreadId());
            }
            return ""; //$NON-NLS-1$
        }

    }

    // ------------------------------------------------------------------------
    // Internal
    // ------------------------------------------------------------------------

    @Override
    protected void buildEventList(final ITmfTrace trace, final ITmfTrace parentTrace, final IProgressMonitor monitor) {
        final ITmfStateSystem ssq = TmfStateSystemAnalysisModule.getStateSystem(trace, KernelAnalysisModule.ID);
        if (ssq == null) {
            return;
        }

        final List<ControlFlowEntry> entryList = new ArrayList<>();
        final List<ControlFlowEntry> flatEntryList = new ArrayList<>();
        fFlatList = new ArrayList<>();
        fHierarchicalList = new ArrayList<>();

        final Map<Integer, ControlFlowEntry> entryMap = new HashMap<>();
        final Map<Integer, ControlFlowEntry> flatEntryMap = new HashMap<>();

        long start = ssq.getStartTime();
        setStartTime(Math.min(getStartTime(), start));

        boolean complete = false;
        while (!complete) {
            if (monitor.isCanceled()) {
                return;
            }
            complete = ssq.waitUntilBuilt(BUILD_UPDATE_TIMEOUT);
            if (ssq.isCancelled()) {
                return;
            }
            long end = ssq.getCurrentEndTime();
            if (start == end && !complete) { // when complete execute one last
                                             // time regardless of end time
                continue;
            }
            final long resolution = Math.max(1, (end - ssq.getStartTime()) / getDisplayWidth());
            setEndTime(Math.max(getEndTime(), end + 1));
            final List<Integer> threadQuarks = ssq.getQuarks(Attributes.THREADS, "*"); //$NON-NLS-1$
            final long qStart = start;
            final long qEnd = end;
            queryFullStates(ssq, qStart, qEnd, resolution, monitor, new IQueryHandler() {
                private void handleControlFlowEntry(int threadQuark, String execName, int threadId, int ppid, long startTime, long endTime,
                        Map<Integer, ControlFlowEntry> controlFlowEntryMap, List<ControlFlowEntry> controlFlowEntryList) {
                    ControlFlowEntry entry = controlFlowEntryMap.get(threadId);
                    if (entry == null) {
                        entry = new ControlFlowEntry(threadQuark, trace, execName, threadId, ppid, startTime, endTime);
                        controlFlowEntryList.add(entry);
                        controlFlowEntryMap.put(threadId, entry);
                    } else {
                        /*
                         * Update the name of the entry to the latest execName
                         * and the parent thread id to the latest ppid.
                         */
                        entry.setName(execName);
                        entry.setParentThreadId(ppid);
                        entry.updateEndTime(endTime);
                    }
                }

                @Override
                public void handle(List<List<ITmfStateInterval>> fullStates, List<ITmfStateInterval> prevFullState) {
                    for (int threadQuark : threadQuarks) {
                        String threadName = ssq.getAttributeName(threadQuark);
                        int threadId = -1;
                        try {
                            threadId = Integer.parseInt(threadName);
                        } catch (NumberFormatException e1) {
                            continue;
                        }
                        if (threadId <= 0) { // ignore the 'unknown' (-1) and
                                             // swapper (0) threads
                            continue;
                        }

                        int execNameQuark;
                        int ppidQuark;
                        try {
                            execNameQuark = ssq.getQuarkRelative(threadQuark, Attributes.EXEC_NAME);
                            ppidQuark = ssq.getQuarkRelative(threadQuark, Attributes.PPID);
                        } catch (AttributeNotFoundException e) {
                            /*
                             * No information on this thread (yet?), skip it for
                             * now
                             */
                            continue;
                        }
                        ITmfStateInterval lastExecNameInterval = prevFullState == null || execNameQuark >= prevFullState.size() ? null : prevFullState.get(execNameQuark);
                        long lastExecNameStartTime = lastExecNameInterval == null ? -1 : lastExecNameInterval.getStartTime();
                        long lastExecNameEndTime = lastExecNameInterval == null ? -1 : lastExecNameInterval.getEndTime() + 1;
                        long lastPpidStartTime = prevFullState == null || ppidQuark >= prevFullState.size() ? -1 : prevFullState.get(ppidQuark).getStartTime();
                        for (List<ITmfStateInterval> fullState : fullStates) {
                            if (monitor.isCanceled()) {
                                return;
                            }
                            if (execNameQuark >= fullState.size() || ppidQuark >= fullState.size()) {
                                /*
                                 * No information on this thread (yet?), skip it
                                 * for now
                                 */
                                continue;
                            }
                            ITmfStateInterval execNameInterval = fullState.get(execNameQuark);
                            ITmfStateInterval ppidInterval = fullState.get(ppidQuark);
                            long startTime = execNameInterval.getStartTime();
                            long endTime = execNameInterval.getEndTime() + 1;
                            if (startTime == lastExecNameStartTime && ppidInterval.getStartTime() == lastPpidStartTime) {
                                continue;
                            }
                            boolean isNull = execNameInterval.getStateValue().isNull();
                            if (isNull && lastExecNameEndTime < startTime && lastExecNameEndTime != -1) {
                                /*
                                 * There was a non-null interval in between the
                                 * full states, try to use it.
                                 */
                                try {
                                    execNameInterval = ssq.querySingleState(startTime - 1, execNameQuark);
                                    ppidInterval = ssq.querySingleState(startTime - 1, ppidQuark);
                                    startTime = execNameInterval.getStartTime();
                                    endTime = execNameInterval.getEndTime() + 1;
                                } catch (AttributeNotFoundException e) {
                                    Activator.getDefault().logError(e.getMessage());
                                } catch (StateSystemDisposedException e) {
                                    /* ignored */
                                }
                            }
                            if (!execNameInterval.getStateValue().isNull() &&
                                    execNameInterval.getStateValue().getType() == ITmfStateValue.Type.STRING) {
                                String execName = execNameInterval.getStateValue().unboxStr();
                                int ppid = ppidInterval.getStateValue().unboxInt();
                                handleControlFlowEntry(threadQuark, execName, threadId, ppid, startTime, endTime, entryMap, entryList);
                                handleControlFlowEntry(threadQuark, execName, threadId, ppid, startTime, endTime, flatEntryMap, flatEntryList);
                            }
                            if (isNull) {
                                entryMap.remove(threadId);
                            }
                            lastExecNameStartTime = startTime;
                            lastExecNameEndTime = endTime;
                            lastPpidStartTime = ppidInterval.getStartTime();
                        }
                    }
                    constructFlatTree(flatEntryList);
                    updateTree(entryList, parentTrace, ssq);

                    for (final TimeGraphEntry entry : getEntryList(ssq)) {
                        if (monitor.isCanceled()) {
                            return;
                        }
                        buildStatusEvents(trace, parentTrace, ssq, fullStates, prevFullState, (ControlFlowEntry) entry, monitor, qStart, qEnd);
                    }
                }
            });

            if (parentTrace.equals(getTrace())) {
                refresh();
            }

            start = end;
        }
    }

    /**
     * the purpose of this method is to set the children of a trace entry with
     * the list newChildren.
     *
     * @param newChildren
     *            A list of entries to use as the children of the trace entry
     */
    private void setTraceEntryChildren(List<TimeGraphEntry> newChildren) {
        ITmfTrace trace = getTrace();
        if (trace == null) {
            return;
        }

        final ITmfStateSystem ss = TmfStateSystemAnalysisModule.getStateSystem(trace, KernelAnalysisModule.ID);

        removeFromEntryList(trace, ss, getEntryList(ss));
        addToEntryList(trace, ss, newChildren);

        refresh();
    }

    /**
     * This method is called by buildEventList. Its purpose is to construct a
     * flat list in parallel with the hierarchical list constructed in
     * updateTree.
     */
    private void constructFlatTree(List<ControlFlowEntry> entryList) {
        for (ControlFlowEntry entry : entryList) {
            if (!fFlatList.contains(entry)) {
                fFlatList.add(entry);
            }
        }
    }

    private void updateTree(List<ControlFlowEntry> entryList, ITmfTrace parentTrace, ITmfStateSystem ss) {
        List<TimeGraphEntry> rootListToAdd = new ArrayList<>();
        List<TimeGraphEntry> rootListToRemove = new ArrayList<>();
        List<TimeGraphEntry> rootList = getEntryList(ss);

        for (ControlFlowEntry entry : entryList) {
            boolean root = (entry.getParent() == null);
            if (root && entry.getParentThreadId() > 0) {
                for (ControlFlowEntry parent : entryList) {
                    /*
                     * Associate the parent entry only if their time overlap. A
                     * child entry may start before its parent, for example at
                     * the beginning of the trace if a parent has not yet
                     * appeared in the state system. We just want to make sure
                     * that the entry didn't start after the parent ended or
                     * ended before the parent started.
                     */
                    if (parent.getThreadId() == entry.getParentThreadId() &&
                            !(entry.getStartTime() > parent.getEndTime() ||
                                    entry.getEndTime() < parent.getStartTime())) {
                        parent.addChild(entry);
                        root = false;
                        if (rootList != null && rootList.contains(entry)) {
                            rootListToRemove.add(entry);
                        }
                        break;
                    }
                }
            }
            if (root && (rootList == null || !rootList.contains(entry))) {
                rootListToAdd.add(entry);
                fHierarchicalList.add(entry);
            }
        }

        addToEntryList(parentTrace, ss, rootListToAdd);
        removeFromEntryList(parentTrace, ss, rootListToRemove);
        fHierarchicalList.remove(rootListToRemove);
    }

    private void buildStatusEvents(ITmfTrace trace, ITmfTrace parentTrace, ITmfStateSystem ss, @NonNull List<List<ITmfStateInterval>> fullStates,
            @Nullable List<ITmfStateInterval> prevFullState, ControlFlowEntry entry, @NonNull IProgressMonitor monitor, long start, long end) {
        if (start < entry.getEndTime() && end > entry.getStartTime()) {
            List<ITimeEvent> eventList = getEventList(entry, ss, fullStates, prevFullState, monitor);
            if (eventList == null) {
                return;
            }
            for (ITimeEvent event : eventList) {
                entry.addEvent(event);
            }
            if (parentTrace.equals(getTrace())) {
                redraw();
            }
        }
        for (ITimeGraphEntry child : entry.getChildren()) {
            if (monitor.isCanceled()) {
                return;
            }
            buildStatusEvents(trace, parentTrace, ss, fullStates, prevFullState, (ControlFlowEntry) child, monitor, start, end);
        }
    }

    @Override
    protected @Nullable List<ITimeEvent> getEventList(@NonNull TimeGraphEntry tgentry, ITmfStateSystem ss,
            @NonNull List<List<ITmfStateInterval>> fullStates, @Nullable List<ITmfStateInterval> prevFullState, @NonNull IProgressMonitor monitor) {
        List<ITimeEvent> eventList = null;
        if (!(tgentry instanceof ControlFlowEntry)) {
            return eventList;
        }
        ControlFlowEntry entry = (ControlFlowEntry) tgentry;
        try {
            int threadQuark = entry.getThreadQuark();
            int statusQuark = ss.getQuarkRelative(threadQuark, Attributes.STATUS);
            eventList = new ArrayList<>(fullStates.size());
            ITmfStateInterval lastInterval = prevFullState == null || statusQuark >= prevFullState.size() ? null : prevFullState.get(statusQuark);
            long lastStartTime = lastInterval == null ? -1 : lastInterval.getStartTime();
            long lastEndTime = lastInterval == null ? -1 : lastInterval.getEndTime() + 1;
            for (List<ITmfStateInterval> fullState : fullStates) {
                if (monitor.isCanceled()) {
                    return null;
                }
                if (statusQuark >= fullState.size()) {
                    /* No information on this thread (yet?), skip it for now */
                    continue;
                }
                ITmfStateInterval statusInterval = fullState.get(statusQuark);
                long time = statusInterval.getStartTime();
                if (time == lastStartTime) {
                    continue;
                }
                long duration = statusInterval.getEndTime() - time + 1;
                int status = -1;
                try {
                    status = statusInterval.getStateValue().unboxInt();
                } catch (StateValueTypeException e) {
                    Activator.getDefault().logError(e.getMessage());
                }
                if (lastEndTime != time && lastEndTime != -1) {
                    eventList.add(new TimeEvent(entry, lastEndTime, time - lastEndTime));
                }
                if (!statusInterval.getStateValue().isNull()) {
                    eventList.add(new TimeEvent(entry, time, duration, status));
                } else {
                    eventList.add(new NullTimeEvent(entry, time, duration));
                }
                lastStartTime = time;
                lastEndTime = time + duration;
            }
        } catch (AttributeNotFoundException | TimeRangeException e) {
            Activator.getDefault().logError(e.getMessage());
        }
        return eventList;
    }

    /**
     * Returns a value corresponding to the selected entry.
     *
     * Used in conjunction with synchingToTime to change the selected entry. If
     * one of these methods is overridden in child class, then both should be.
     *
     * @param time
     *            The currently selected time
     * @return a value identifying the entry
     */
    private int getSelectionValue(long time) {
        int thread = -1;
        for (ITmfTrace trace : TmfTraceManager.getTraceSet(getTrace())) {
            if (thread > 0) {
                break;
            }
            ITmfStateSystem ssq = TmfStateSystemAnalysisModule.getStateSystem(trace, KernelAnalysisModule.ID);
            if (ssq == null) {
                continue;
            }
            if (time >= ssq.getStartTime() && time <= ssq.getCurrentEndTime()) {
                List<Integer> currentThreadQuarks = ssq.getQuarks(Attributes.CPUS, "*", Attributes.CURRENT_THREAD); //$NON-NLS-1$
                for (int currentThreadQuark : currentThreadQuarks) {
                    try {
                        ITmfStateInterval currentThreadInterval = ssq.querySingleState(time, currentThreadQuark);
                        int currentThread = currentThreadInterval.getStateValue().unboxInt();
                        if (currentThread > 0) {
                            int statusQuark = ssq.getQuarkAbsolute(Attributes.THREADS, Integer.toString(currentThread), Attributes.STATUS);
                            ITmfStateInterval statusInterval = ssq.querySingleState(time, statusQuark);
                            if (statusInterval.getStartTime() == time) {
                                thread = currentThread;
                                break;
                            }
                        }
                    } catch (AttributeNotFoundException | TimeRangeException | StateValueTypeException e) {
                        Activator.getDefault().logError(e.getMessage());
                    } catch (StateSystemDisposedException e) {
                        /* Ignored */
                    }
                }
            }
        }
        return thread;
    }

    @Override
    protected void synchingToTime(long time) {
        int selected = getSelectionValue(time);
        if (selected > 0) {
            for (Object element : getTimeGraphViewer().getExpandedElements()) {
                if (element instanceof ControlFlowEntry) {
                    ControlFlowEntry entry = (ControlFlowEntry) element;
                    if (entry.getThreadId() == selected) {
                        getTimeGraphCombo().setSelection(entry);
                        break;
                    }
                }
            }
        }
    }

    @Override
    protected @NonNull List<ILinkEvent> getLinkList(ITmfStateSystem ss,
            @NonNull List<List<ITmfStateInterval>> fullStates, @Nullable List<ITmfStateInterval> prevFullState, @NonNull IProgressMonitor monitor) {
        List<ILinkEvent> list = new ArrayList<>();
        List<TimeGraphEntry> entryList = getEntryList(ss);
        if (entryList == null) {
            return list;
        }
        for (ITmfTrace trace : TmfTraceManager.getTraceSet(getTrace())) {
            List<Integer> currentThreadQuarks = ss.getQuarks(Attributes.CPUS, "*", Attributes.CURRENT_THREAD); //$NON-NLS-1$
            for (int currentThreadQuark : currentThreadQuarks) {
                if (currentThreadQuark >= fullStates.get(0).size()) {
                    /* No information on this cpu (yet?), skip it for now */
                    continue;
                }
                List<ITmfStateInterval> currentThreadIntervals = new ArrayList<>(fullStates.size() + 2);
                try {
                    /*
                     * Add the previous interval if it is the first query
                     * iteration and the first interval has currentThread=0. Add
                     * the following interval if the last interval has
                     * currentThread=0. These are diagonal arrows crossing the
                     * query iteration range.
                     */
                    if (prevFullState == null) {
                        ITmfStateInterval currentThreadInterval = fullStates.get(0).get(currentThreadQuark);
                        if (currentThreadInterval.getStateValue().unboxInt() == 0) {
                            long start = Math.max(currentThreadInterval.getStartTime() - 1, ss.getStartTime());
                            currentThreadIntervals.add(ss.querySingleState(start, currentThreadQuark));
                        }
                    }
                    for (List<ITmfStateInterval> fullState : fullStates) {
                        currentThreadIntervals.add(fullState.get(currentThreadQuark));
                    }
                    ITmfStateInterval currentThreadInterval = fullStates.get(fullStates.size() - 1).get(currentThreadQuark);
                    if (currentThreadInterval.getStateValue().unboxInt() == 0) {
                        long end = Math.min(currentThreadInterval.getEndTime() + 1, ss.getCurrentEndTime());
                        currentThreadIntervals.add(ss.querySingleState(end, currentThreadQuark));
                    }
                } catch (AttributeNotFoundException e) {
                    Activator.getDefault().logError(e.getMessage());
                    return list;
                } catch (StateSystemDisposedException e) {
                    /* Ignored */
                    return list;
                }
                int prevThread = 0;
                long prevEnd = 0;
                long lastEnd = 0;
                for (ITmfStateInterval currentThreadInterval : currentThreadIntervals) {
                    if (monitor.isCanceled()) {
                        return list;
                    }
                    if (currentThreadInterval.getEndTime() + 1 == lastEnd) {
                        continue;
                    }
                    long time = currentThreadInterval.getStartTime();
                    if (time != lastEnd) {
                        // don't create links where there are gaps in intervals
                        // due to the resolution
                        prevThread = 0;
                        prevEnd = 0;
                    }
                    int thread = currentThreadInterval.getStateValue().unboxInt();
                    if (thread > 0 && prevThread > 0) {
                        ITimeGraphEntry prevEntry = findEntry(entryList, trace, prevThread);
                        ITimeGraphEntry nextEntry = findEntry(entryList, trace, thread);
                        list.add(new TimeLinkEvent(prevEntry, nextEntry, prevEnd, time - prevEnd, 0));
                    }
                    lastEnd = currentThreadInterval.getEndTime() + 1;
                    if (thread != 0) {
                        prevThread = thread;
                        prevEnd = lastEnd;
                    }
                }
            }
        }
        return list;
    }

    private ControlFlowEntry findEntry(List<? extends ITimeGraphEntry> entryList, ITmfTrace trace, int threadId) {
        for (ITimeGraphEntry entry : entryList) {
            if (entry instanceof ControlFlowEntry) {
                ControlFlowEntry controlFlowEntry = (ControlFlowEntry) entry;
                if (controlFlowEntry.getThreadId() == threadId && controlFlowEntry.getTrace() == trace) {
                    return controlFlowEntry;
                } else if (entry.hasChildren()) {
                    controlFlowEntry = findEntry(entry.getChildren(), trace, threadId);
                    if (controlFlowEntry != null) {
                        return controlFlowEntry;
                    }
                }
            }
        }
        return null;
    }
}
